{{LicenseBlock}}

{{UsingBlock}}

// auto-generated file

namespace {{Namespace}}
{
    /// <summary>
    /// {{Summary}}
    /// </summary>
    public class {{ClassName}} : ARCommand
    {
{{#if HasEnums}}
    {{#each Enums}}
        public enum {{CamelCaseName}}
        {
        {{#each Values}}
            /// <summary>{{Description}}<</summary>
            {{CamelCaseName}} = {{Value}},
        {{/each}}
        }
    {{/each}}
{{/if}}

        /// <summary>Create command structure.</summary>
        public {{ClassName}}() : base(new ARCommandIdentifier({{FeatureId}}, {{ClassId}}, {{CommandId}}))
        {
        }

        /// <inheritdoc cref="ARCommand.ARCommandSize" />
        public override int ARCommandSize => {{Size}};

{{#each Args}}
        /// <summary>{{Summary}}</summary>
        public {{ClassType}} {{CamelCaseName}} { get; set; }

{{/each}}

        /// <inheritdoc cref="ARCommand.Decode" />
        public override bool Decode(byte[] buffer, ref int index)
        {
            bool success = false;

            if (buffer.Length - index >= ARCommandSize)
            {
{{#each Args}}
    {{#if UsesBitConverter}}
                {{CamelCaseName}} = ({{ClassType}})BitConverter.{{BitConverterMethod}}(buffer, index);
    {{else if IsString}}
                {
                    int count = Array.IndexOf<byte>(buffer, 0, index) - index;
                    {{CamelCaseName}} = System.Text.Encoding.ASCII.GetString(buffer, index, buffer.Length - index);
                }
    {{else}}
                {{CamelCaseName}} = ({{ClassType}})buffer[index];
    {{/if}}
                index += {{ConsumedBytes}};

{{/each}}
            }

            return success;
        }

        /// <inheritdoc cref="ARCommand.Encode" />
        public override bool Encode(byte[] buffer, ref int index)
        {
            bool success = false;
            int originalIndex = index;

            if (buffer.Length - index >= ARCommandSize)
            {
{{#each Args}}
                success &= ARPacker.Append(buffer, ref index, ({{PackClassType}}){{CamelCaseName}});
{{/each}}
            }

            if (!success)
            {
                index = originalIndex;
            }
            return success;
        }
    }
}
